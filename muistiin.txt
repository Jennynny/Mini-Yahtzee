Gameboard.js

import { useEffect, useState } from "react";
import { Text, View, Pressable } from "react-native";
import Header from "./Header";
import Footer from "./Footer";
import styles from '../style/Style';
import { MIN_SPOT, MAX_SPOT, NBR_OF_DICES, NBR_OF_THROWS, BONUS_POINTS_LIMIT, BONUS_POINTS, SCOREBOARD_KEY } from "../constants/Game";
import { Container, Row, Col } from 'react-native-flex-grid';
//import { Pressable } from "react-native";
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';
import AsyncStorage from "@react-native-async-storage/async-storage";


let board = [];

export default Gameboard = ({navigation, route}) => {

    const[playerName, setPlayerName] = useState('');
    const [nbrOfThrowsLeft, setNbrOfThrowsLeft] = useState(NBR_OF_THROWS);
    const [status, setStatus] = useState('Throw dices');
    const [gameEndStatus, setGameEndStatus] = useState(false);
    //Ovatko nopat kiinnitetty
    const [selectedDices, setSelectedDices] =
    useState(new Array(NBR_OF_DICES).fill(false));
    //Noppien silmäluvut
    const [diceSpots, setDiceSpots] =
    useState(new Array(NBR_OF_DICES).fill(0));
    //Onko silmäluvulle valittu pisteet? epätosi/tosi
    const [selectedDicePoints, setSelectedDicePoints] =
    useState(new Array(MAX_SPOT).fill(false));
    // Kerätyt pisteet
    const [dicePointsTotal, setDicePointsTotal] =
    useState(new Array(MAX_SPOT).fill(0));

    const [scores, setScores] = useState([]);


    useEffect(()=> {
        if (playerName === '' && route.params?.player) {
            setPlayerName(route.params.player);
        }
    },[]);

    useEffect(() => {
        const unsubcribe = navigation.addListener('focus', () => {
            getScoreboardData();
        });
        return unsubcribe;
    }, [navigation]);


    const dicesRow = [];
    for (let dice = 0; dice < NBR_OF_DICES; dice++) {
        dicesRow.push(
            <Col key={"dice" + dice}>
                <Pressable
                key={"dice" + dice}
                onPress={()=> selectDice(dice)}>
                <MaterialCommunityIcons
                name={board[dice]}
                key={"dice"+dice}
                size={50}
                color={getDiceColor(dice)}>
                </MaterialCommunityIcons>
                </Pressable>
            </Col>
        );
    }

    // const pointsRow = [];
    // for (let spot = 0; spot < MAX_SPOT; spot++){
    //     pointsRow.push(
    //         <Col key={"pointsRow" + spot}>
    //             <Pressable
    //             key={"pointsRow" + spot}
    //             onPress={()=> selectDice(dice)}>
    //             </Pressable>
    //         </Col>
    //     );
    // }
    const pointsRow = [];
    for (let spot = 0; spot < MAX_SPOT; spot++){
    pointsRow.push(
        <Col key={"pointsRow" + spot}>
            <Text key={"pointsRow" + spot}>{getSpotTotal(spot)}
            </Text>
        </Col>
    );
    }

    const pointsToSelectRow = [];
    for (let diceButton = 0; diceButton < MAX_SPOT; diceButton++){
        pointsToSelectRow.push(
            <Col key={"buttonsRow" + diceButton}>
                <Pressable
                key={"buttonsRow" + diceButton}
                onPress={() => selectDicePoints(diceButton)}
                >
                <MaterialCommunityIcons
                name={"numeric-" + (diceButton + 1) + "-circle"}
                key={"buttonsRow" + diceButton}
                size={35}
                color={getDicePointsColor(diceButton)}
                >
                </MaterialCommunityIcons>   
                </Pressable>
            </Col>
        );
    }

    const selectDicePoints = (i) => {
        if(nbrOfThrowsLeft === 0){
        let selectedPoints = [...selectedDicePoints];
        let points = [...dicePointsTotal];
        if (!selectedPoints[i]){
        selectedPoints[i] = true;
        let nbrOfDices = diceSpots.reduce((total, x) => (x === (i + 1) ? total + 1 : total), 0);
        points[i] = nbrOfDices * (i+1);
        } else {
            setStatus('You already selected points for ' + (i+1));
            return points[i];
        }
        setDicePointsTotal(points);
        setSelectedDicePoints(selectedPoints);
        return points[i];
        }
        else{
           setStatus('Throw ' + NBR_OF_THROWS + 'times before setting points'); 
        }
    }

    const savePlayerPoints = async() => {
        const newKey = scores.length + 1;
        const playerPoints = {
            key: newKey,
            name: playerName,
            date: 'pvm',//päivämäärä tänne funktiolla
            time:'klo', //kellonaika tänne funktiolla
            points: 0 // yhteispisteet (mahdollinen bonus mukaan)
        }
        try {
            const newScore = [...scores,playerPoints];
            const jsonValue = JSON.stringify(newScore);
            await AsyncStorage.setItem(SCOREBOARD_KEY, jsonValue);
        }
        catch (e) {
            console.log (' Save error: ' + e);
        }
    }

    const getScoreboardData = async () => {
        try {
            const jsonValue = await AsyncStorage.getItem(SCOREBOARD_KEY);
            if (jsonValue !== null) {
                let tmpScores = JSON.parse(jsonValue);
                setScores (tmpScores);
            }
        } 
        catch(e) {
            console.log('Read error: ' + e);
            }
    }

    const throwDices = () =>{
        if(nbrOfThrowsLeft === 0 && !gameEndStatus){
            setStatus('Select your points before the next throw');
            return 1;
        }else if (nbrOfThrowsLeft ===0 && gameEndStatus) {
            setGameEndStatus(false);
            diceSpots.fill(0);
            dicePointsTotal.fill(0);
        }
        let spots = [...diceSpots];
        for ( let i = 0; i < NBR_OF_DICES; i++) {
            if (!selectedDices[i]) {
                let randomNumber = Math.floor(Math.random() * 6 + 1);
                board[i] = 'dice-' + randomNumber;
                spots[i] = randomNumber;
            }
        }
        setNbrOfThrowsLeft(nbrOfThrowsLeft-1);
        setDiceSpots(spots);
        setStatus('Select and throw dices again');
    }


    function getSpotTotal(i){
        return dicePointsTotal[i];
    }
    

    const selectDice = (i) => {
        if(nbrOfThrowsLeft < NBR_OF_THROWS && !gameEndStatus){
            let dices = [...selectedDices];
            dices[i] = selectedDices[i] ? false : true;
            setSelectedDices(dices);
        }
        else {
            setStatus('You have to throw dices first.');
        }
    }

    function getDiceColor(i) {
        return selectedDices[i] ? "black" : "steelblue" ;
    }

    function getDicePointsColor(i) {
        return (selectedDicePoints[i] && !gameEndStatus) ? "black" : "steelblue" ;
    }

    return(
        <>
        <Header />
        <View>
            <Text>Gameboard here...</Text>
           <Container fluid>
            <Row>{dicesRow}</Row>
           </Container>
           <Text>Throws left:{nbrOfThrowsLeft}</Text>
           <Text>{status}</Text>
           <Pressable
           onPress={()=>throwDices()}
           ><Text>THROW DICES</Text>
           </Pressable>
           <Container fluid>
            <Row>{pointsRow}</Row>
           </Container>
           <Container fluid>
            <Row>{pointsToSelectRow}</Row>
           </Container>
           <Pressable
            onPress={() => savePlayerPoints()}>
                <Text>SAVE POINTS</Text>
           </Pressable>
            <Text>Player: {playerName}</Text>
        </View>
        <Footer />
        </>
    )
}

Scoreboard.js

import { useState, useEffect } from "react";
import { Text, View, Pressable } from "react-native";
import { DataTable } from "react-native-paper";
import Header from "./Header";
import Footer from "./Footer";
import styles from '../style/Style';
import { NBR_OF_SCOREBOARD_ROWS, SCOREBOARD_KEY } from "../constants/Game";
import AsyncStorage from "@react-native-async-storage/async-storage";
//import { Container, Row, Col } from "react-native-flex-grid";

export default Scoreboard = ({ navigation }) => {

    useEffect(() => {
        const unsubcribe = navigation.addListener('focus', () => {
            getScoreboardData();
        });
        return unsubcribe;
    }, [navigation]);

    const [scores, setScores] = useState ([]);

    const getScoreboardData = async () => {
        try {
            const jsonValue = await AsyncStorage.getItem(SCOREBOARD_KEY);
            if (jsonValue !== null) {
                let tmpScores = JSON.parse(jsonValue);
                setScores (tmpScores);
            }
        } 
        catch(e) {
            console.log('Read error: ' + e);
            }
    }

    const clearScoreboard = async() => {
        try {
            await AsyncStorage.clear();
            setScores([]);
        }
        catch(e) {
            console.log ('Clear error: '+ e);
        }
    }


    return(
        <>
        <Header />
        <View>
            <Text>Scoreboard here...</Text>
           { scores.length === 0 ?
            <Text>Scoreboar is empty</Text>
            :
            scores.map((player, index) => (
                index < NBR_OF_SCOREBOARD_ROWS &&
                <DataTable.Row key={player.key}>
                    <DataTable.Cell><Text>{index + 1}</Text></DataTable.Cell>
                    <DataTable.Cell><Text>{player.name}</Text></DataTable.Cell>
                    <DataTable.Cell><Text>{player.date}</Text></DataTable.Cell>
                    <DataTable.Cell><Text>{player.time}</Text></DataTable.Cell>
                    <DataTable.Cell><Text>{player.points}</Text></DataTable.Cell>
                </DataTable.Row>
            ))
        }
        </View>
        <View>
            <Pressable
            onPress={() => clearScoreboard()}>
                <Text>CLEAR SCOREBOARD</Text>
            </Pressable>
        </View>
        <Footer />
        </>
    )
}

App.js


import Home from './components/Home';
import Gameboard from './components/Gameboard';
import Scoreboard from './components/Scoreboard';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';

const Tab = createBottomTabNavigator();

export default function App() {
  return (
    <NavigationContainer>
    <Tab.Navigator
      //initialRouteName="Feed"
      sceneContainerStyle={{backgroundColor: 'tarnsparent'}}
      screenOptions={({route})=> ({
        tabBarIcon: ({focused, color, size}) => {
          let iconName;
          if (route.name === 'Home') {
            iconName = focused
            ? 'information'
            : 'information-outline'
          }
          else if (route.name === 'Gameboard'){
            iconName = focused
            ? 'dice-multiple'
            : 'dice-multiple-outline'
          }
          else if (route.name === 'Scoreboard') {
            iconName = focused
            ? 'view-list'
            : 'view-list-outline'
          }
          return <MaterialCommunityIcons
          name={iconName}
          size={size}
          color={color}
          />
        },
        tabBarActiveTintColor: 'steelblue',
        tabBarInActiveTintColor: 'gray'
      })}
    >
      <Tab.Screen name="Home" component={Home} options={{tabBarStyle: {display:"none"}}}/>
      <Tab.Screen name="Gameboard" component={Gameboard} />
      <Tab.Screen name="Scoreboard" component={Scoreboard} />
      </Tab.Navigator>
      </NavigationContainer>
  );
}


Home.js


import { useState } from "react";
import { TextInput, Text, View,Pressable, Keyboard } from "react-native";
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';
import Header from "./Header";
import Footer from "./Footer";
import { NBR_OF_DICES, NBR_OF_THROWS, MIN_SPOT, MAX_SPOT,BONUS_POINTS_LIMIT, BONUS_POINTS} from '../constants/Game';
import styles from '../style/Style';

export default Home = ({navigation}) => {
    const [playerName, setPlayerName] = useState('');
    const [hasPlayerName, setHasPlayerName] = useState(false);

    const handlePlayerName = (value) => {
        if (value.trim().length > 0 ) {
            setHasPlayerName(true);
            Keyboard.dismiss();
        }
    }

    return (
        <>
        <Header />
        <View>
            <MaterialCommunityIcons name="information" size={90} color="Steelblue" /> 
            {!hasPlayerName ?
            <>
            <Text>For scoreboard enter your name...</Text>
            <TextInput onChangeText={setPlayerName} autoFocus={true} />
            <Pressable
                onPress={() => handlePlayerName(playerName)}
                ><Text>OK</Text>
                </Pressable>
            </>
            :
            <>
            <Text>Rules of the Game...</Text>
            <Text multiline ="true">
            THE GAME: Upper section of the classic Yahtzee
            dice game. You have {NBR_OF_DICES} dices and
            for the every dice you have {NBR_OF_THROWS}
            throws. After each throw you can keep dices in
            order to get same dice spot counts as many as
            possible. In the end of the turn you must select
            your points from {MIN_SPOT} to {MAX_SPOT}.
            Game ends when all points have been selected.
            The order for selecting those is free.
            </Text>
            <Text multiline ="true">
            POINTS: After each turn game calculates the sum
            for the dices you selected. Only the dices having
            the same spot count are calculated. Inside the
            game you can not select same points from
            {MIN_SPOT} to {MAX_SPOT} again.     
            </Text>
            <Text multiline ="true">
            GOAL: To get points as much as possible.
            {BONUS_POINTS_LIMIT} points is the limit of
            getting bonus which gives you {BONUS_POINTS}
            points more.
            </Text>
            <Text>Good luck, {playerName}</Text>
            <Pressable
            onPress={() => navigation.navigate('Gameboard', {player:playerName})}>
                <Text>PLAY</Text>
            </Pressable>
            </>
            }
        </View>
        <Footer />
        </>
    )
}

Header.js


import React from 'react'
import { Text, View } from 'react-native'
import styles from '../style/Style'

export default function Header() {
  return (
    <View style={styles.header}>
      <Text style={styles.title}>
        Mini-Yahtzee
      </Text>
    </View>
  )
}


Footer.js

import React from 'react'
import { Text, View } from 'react-native'
import styles from '../style/Style'

export default function Footer() {
  return (
    <View style={styles.footer}>
      <Text style={styles.author}>
        Author: Jenny K
      </Text>
    </View>
  )
}


Game.js

export const NBR_OF_DICES = 5;
export const NBR_OF_THROWS = 3;
export const MIN_SPOT = 1;
export const MAX_SPOT = 6;
export const BONUS_POINTS_LIMIT = 63;
export const BONUS_POINTS = 50;
export const NBR_OF_SCOREBOARD_ROWS = 7;
//7 parasta on tässä eli tän voinee muuttaa?
export const SCOREBOARD_KEY = '@scoreboardtemp';


Game.js


export const NBR_OF_DICES = 5;
export const NBR_OF_THROWS = 3;
export const MIN_SPOT = 1;
export const MAX_SPOT = 6;
export const BONUS_POINTS_LIMIT = 63;
export const BONUS_POINTS = 50;
export const NBR_OF_SCOREBOARD_ROWS = 7;
//7 parasta on tässä eli tän voinee muuttaa?
export const SCOREBOARD_KEY = '@scoreboardtemp';